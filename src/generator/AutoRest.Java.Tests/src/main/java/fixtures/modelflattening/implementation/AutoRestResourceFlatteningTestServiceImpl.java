/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.modelflattening.implementation;

import fixtures.modelflattening.AutoRestResourceFlatteningTestService;
import com.microsoft.rest.ServiceClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.microsoft.rest.Validator;
import fixtures.modelflattening.models.ErrorException;
import fixtures.modelflattening.models.FlattenedProduct;
import fixtures.modelflattening.models.FlattenParameterGroup;
import fixtures.modelflattening.models.Resource;
import fixtures.modelflattening.models.ResourceCollection;
import fixtures.modelflattening.models.SimpleProduct;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.Response;

/**
 * Initializes a new instance of the AutoRestResourceFlatteningTestService class.
 */
public final class AutoRestResourceFlatteningTestServiceImpl extends ServiceClient implements AutoRestResourceFlatteningTestService {
    /**
     * The Retrofit service to perform REST calls.
     */
    private AutoRestResourceFlatteningTestServiceService service;

    /**
     * Initializes an instance of AutoRestResourceFlatteningTestService client.
     */
    public AutoRestResourceFlatteningTestServiceImpl() {
        this("http://localhost");
    }

    /**
     * Initializes an instance of AutoRestResourceFlatteningTestService client.
     *
     * @param baseUrl the base URL of the host
     */
    public AutoRestResourceFlatteningTestServiceImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of AutoRestResourceFlatteningTestService client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public AutoRestResourceFlatteningTestServiceImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("http://localhost", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of AutoRestResourceFlatteningTestService client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public AutoRestResourceFlatteningTestServiceImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(AutoRestResourceFlatteningTestServiceService.class);
    }

    /**
     * The interface defining all the services for AutoRestResourceFlatteningTestService to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AutoRestResourceFlatteningTestServiceService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("model-flatten/array")
        Call<ResponseBody> putArray(@Body List<Resource> resourceArray);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("model-flatten/array")
        Call<ResponseBody> getArray();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("model-flatten/dictionary")
        Call<ResponseBody> putDictionary(@Body Map<String, FlattenedProduct> resourceDictionary);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("model-flatten/dictionary")
        Call<ResponseBody> getDictionary();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("model-flatten/resourcecollection")
        Call<ResponseBody> putResourceCollection(@Body ResourceCollection resourceComplexObject);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("model-flatten/resourcecollection")
        Call<ResponseBody> getResourceCollection();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("model-flatten/customFlattening")
        Call<ResponseBody> putSimpleProduct(@Body SimpleProduct simpleBodyProduct);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("model-flatten/customFlattening")
        Call<ResponseBody> postFlattenedSimpleProduct(@Body SimpleProduct simpleBodyProduct);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("model-flatten/customFlattening/parametergrouping/{name}/")
        Call<ResponseBody> putSimpleProductWithGrouping(@Path("name") String name, @Body SimpleProduct simpleBodyProduct);

    }

    /**
     * Put External Resource as an Array.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putArray() throws ErrorException, IOException {
        final List<Resource> resourceArray = null;
        Call<ResponseBody> call = service.putArray(resourceArray);
        return putArrayDelegate(call.execute());
    }

    /**
     * Put External Resource as an Array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putArrayAsync(final ServiceCallback<Void> serviceCallback) {
        final List<Resource> resourceArray = null;
        Call<ResponseBody> call = service.putArray(resourceArray);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putArrayDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Put External Resource as an Array.
     *
     * @param resourceArray External Resource as an Array to put
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putArray(List<Resource> resourceArray) throws ErrorException, IOException {
        Validator.validate(resourceArray);
        Call<ResponseBody> call = service.putArray(resourceArray);
        return putArrayDelegate(call.execute());
    }

    /**
     * Put External Resource as an Array.
     *
     * @param resourceArray External Resource as an Array to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putArrayAsync(List<Resource> resourceArray, final ServiceCallback<Void> serviceCallback) {
        Validator.validate(resourceArray);
        Call<ResponseBody> call = service.putArray(resourceArray);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putArrayDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putArrayDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get External Resource as an Array.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;FlattenedProduct&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<List<FlattenedProduct>> getArray() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getArray();
        return getArrayDelegate(call.execute());
    }

    /**
     * Get External Resource as an Array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<List<FlattenedProduct>> getArrayAsync(final ServiceCallback<List<FlattenedProduct>> serviceCallback) {
        Call<ResponseBody> call = service.getArray();
        final ServiceCall<List<FlattenedProduct>> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<List<FlattenedProduct>>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<List<FlattenedProduct>> clientResponse = getArrayDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<List<FlattenedProduct>> getArrayDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<List<FlattenedProduct>, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<List<FlattenedProduct>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put External Resource as a Dictionary.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putDictionary() throws ErrorException, IOException {
        final Map<String, FlattenedProduct> resourceDictionary = null;
        Call<ResponseBody> call = service.putDictionary(resourceDictionary);
        return putDictionaryDelegate(call.execute());
    }

    /**
     * Put External Resource as a Dictionary.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putDictionaryAsync(final ServiceCallback<Void> serviceCallback) {
        final Map<String, FlattenedProduct> resourceDictionary = null;
        Call<ResponseBody> call = service.putDictionary(resourceDictionary);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putDictionaryDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Put External Resource as a Dictionary.
     *
     * @param resourceDictionary External Resource as a Dictionary to put
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putDictionary(Map<String, FlattenedProduct> resourceDictionary) throws ErrorException, IOException {
        Validator.validate(resourceDictionary);
        Call<ResponseBody> call = service.putDictionary(resourceDictionary);
        return putDictionaryDelegate(call.execute());
    }

    /**
     * Put External Resource as a Dictionary.
     *
     * @param resourceDictionary External Resource as a Dictionary to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putDictionaryAsync(Map<String, FlattenedProduct> resourceDictionary, final ServiceCallback<Void> serviceCallback) {
        Validator.validate(resourceDictionary);
        Call<ResponseBody> call = service.putDictionary(resourceDictionary);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putDictionaryDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putDictionaryDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get External Resource as a Dictionary.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Map&lt;String, FlattenedProduct&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Map<String, FlattenedProduct>> getDictionary() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getDictionary();
        return getDictionaryDelegate(call.execute());
    }

    /**
     * Get External Resource as a Dictionary.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Map<String, FlattenedProduct>> getDictionaryAsync(final ServiceCallback<Map<String, FlattenedProduct>> serviceCallback) {
        Call<ResponseBody> call = service.getDictionary();
        final ServiceCall<Map<String, FlattenedProduct>> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Map<String, FlattenedProduct>>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Map<String, FlattenedProduct>> clientResponse = getDictionaryDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Map<String, FlattenedProduct>> getDictionaryDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Map<String, FlattenedProduct>, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<Map<String, FlattenedProduct>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put External Resource as a ResourceCollection.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putResourceCollection() throws ErrorException, IOException {
        final ResourceCollection resourceComplexObject = null;
        Call<ResponseBody> call = service.putResourceCollection(resourceComplexObject);
        return putResourceCollectionDelegate(call.execute());
    }

    /**
     * Put External Resource as a ResourceCollection.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putResourceCollectionAsync(final ServiceCallback<Void> serviceCallback) {
        final ResourceCollection resourceComplexObject = null;
        Call<ResponseBody> call = service.putResourceCollection(resourceComplexObject);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putResourceCollectionDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Put External Resource as a ResourceCollection.
     *
     * @param resourceComplexObject External Resource as a ResourceCollection to put
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putResourceCollection(ResourceCollection resourceComplexObject) throws ErrorException, IOException {
        Validator.validate(resourceComplexObject);
        Call<ResponseBody> call = service.putResourceCollection(resourceComplexObject);
        return putResourceCollectionDelegate(call.execute());
    }

    /**
     * Put External Resource as a ResourceCollection.
     *
     * @param resourceComplexObject External Resource as a ResourceCollection to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putResourceCollectionAsync(ResourceCollection resourceComplexObject, final ServiceCallback<Void> serviceCallback) {
        Validator.validate(resourceComplexObject);
        Call<ResponseBody> call = service.putResourceCollection(resourceComplexObject);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putResourceCollectionDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putResourceCollectionDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get External Resource as a ResourceCollection.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the ResourceCollection object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ResourceCollection> getResourceCollection() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getResourceCollection();
        return getResourceCollectionDelegate(call.execute());
    }

    /**
     * Get External Resource as a ResourceCollection.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<ResourceCollection> getResourceCollectionAsync(final ServiceCallback<ResourceCollection> serviceCallback) {
        Call<ResponseBody> call = service.getResourceCollection();
        final ServiceCall<ResourceCollection> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<ResourceCollection>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<ResourceCollection> clientResponse = getResourceCollectionDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ResourceCollection> getResourceCollectionDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<ResourceCollection, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<ResourceCollection>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the SimpleProduct object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<SimpleProduct> putSimpleProduct() throws ErrorException, IOException {
        final SimpleProduct simpleBodyProduct = null;
        Call<ResponseBody> call = service.putSimpleProduct(simpleBodyProduct);
        return putSimpleProductDelegate(call.execute());
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<SimpleProduct> putSimpleProductAsync(final ServiceCallback<SimpleProduct> serviceCallback) {
        final SimpleProduct simpleBodyProduct = null;
        Call<ResponseBody> call = service.putSimpleProduct(simpleBodyProduct);
        final ServiceCall<SimpleProduct> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<SimpleProduct>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<SimpleProduct> clientResponse = putSimpleProductDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @param simpleBodyProduct Simple body product to put
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the SimpleProduct object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<SimpleProduct> putSimpleProduct(SimpleProduct simpleBodyProduct) throws ErrorException, IOException {
        Validator.validate(simpleBodyProduct);
        Call<ResponseBody> call = service.putSimpleProduct(simpleBodyProduct);
        return putSimpleProductDelegate(call.execute());
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @param simpleBodyProduct Simple body product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<SimpleProduct> putSimpleProductAsync(SimpleProduct simpleBodyProduct, final ServiceCallback<SimpleProduct> serviceCallback) {
        Validator.validate(simpleBodyProduct);
        Call<ResponseBody> call = service.putSimpleProduct(simpleBodyProduct);
        final ServiceCall<SimpleProduct> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<SimpleProduct>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<SimpleProduct> clientResponse = putSimpleProductDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<SimpleProduct> putSimpleProductDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<SimpleProduct, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<SimpleProduct>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put Flattened Simple Product with client flattening true on the parameter.
     *
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     * @param maxProductDisplayName Display name of product.
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the SimpleProduct object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<SimpleProduct> postFlattenedSimpleProduct(String productId, String maxProductDisplayName) throws ErrorException, IOException, IllegalArgumentException {
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (maxProductDisplayName == null) {
            throw new IllegalArgumentException("Parameter maxProductDisplayName is required and cannot be null.");
        }
        final String description = null;
        final String genericValue = null;
        final String odatavalue = null;
        SimpleProduct simpleBodyProduct = new SimpleProduct();
        simpleBodyProduct.withProductId(productId);
        simpleBodyProduct.withDescription(null);
        simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
        simpleBodyProduct.withGenericValue(null);
        simpleBodyProduct.withOdatavalue(null);
        Call<ResponseBody> call = service.postFlattenedSimpleProduct(simpleBodyProduct);
        return postFlattenedSimpleProductDelegate(call.execute());
    }

    /**
     * Put Flattened Simple Product with client flattening true on the parameter.
     *
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     * @param maxProductDisplayName Display name of product.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<SimpleProduct> postFlattenedSimpleProductAsync(String productId, String maxProductDisplayName, final ServiceCallback<SimpleProduct> serviceCallback) {
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (maxProductDisplayName == null) {
            throw new IllegalArgumentException("Parameter maxProductDisplayName is required and cannot be null.");
        }
        final String description = null;
        final String genericValue = null;
        final String odatavalue = null;
        SimpleProduct simpleBodyProduct = new SimpleProduct();
        simpleBodyProduct.withProductId(productId);
        simpleBodyProduct.withDescription(null);
        simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
        simpleBodyProduct.withGenericValue(null);
        simpleBodyProduct.withOdatavalue(null);
        Call<ResponseBody> call = service.postFlattenedSimpleProduct(simpleBodyProduct);
        final ServiceCall<SimpleProduct> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<SimpleProduct>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<SimpleProduct> clientResponse = postFlattenedSimpleProductDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Put Flattened Simple Product with client flattening true on the parameter.
     *
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     * @param maxProductDisplayName Display name of product.
     * @param description Description of product.
     * @param genericValue Generic URL value.
     * @param odatavalue URL value.
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the SimpleProduct object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<SimpleProduct> postFlattenedSimpleProduct(String productId, String maxProductDisplayName, String description, String genericValue, String odatavalue) throws ErrorException, IOException, IllegalArgumentException {
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (maxProductDisplayName == null) {
            throw new IllegalArgumentException("Parameter maxProductDisplayName is required and cannot be null.");
        }
        SimpleProduct simpleBodyProduct = null;
        if (description != null || genericValue != null || odatavalue != null) {
            simpleBodyProduct = new SimpleProduct();
            simpleBodyProduct.withProductId(productId);
            simpleBodyProduct.withDescription(description);
            simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
            simpleBodyProduct.withGenericValue(genericValue);
            simpleBodyProduct.withOdatavalue(odatavalue);
        }
        Call<ResponseBody> call = service.postFlattenedSimpleProduct(simpleBodyProduct);
        return postFlattenedSimpleProductDelegate(call.execute());
    }

    /**
     * Put Flattened Simple Product with client flattening true on the parameter.
     *
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     * @param maxProductDisplayName Display name of product.
     * @param description Description of product.
     * @param genericValue Generic URL value.
     * @param odatavalue URL value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<SimpleProduct> postFlattenedSimpleProductAsync(String productId, String maxProductDisplayName, String description, String genericValue, String odatavalue, final ServiceCallback<SimpleProduct> serviceCallback) {
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (maxProductDisplayName == null) {
            throw new IllegalArgumentException("Parameter maxProductDisplayName is required and cannot be null.");
        }
        SimpleProduct simpleBodyProduct = null;
        if (description != null || genericValue != null || odatavalue != null) {
            simpleBodyProduct = new SimpleProduct();
            simpleBodyProduct.withProductId(productId);
            simpleBodyProduct.withDescription(description);
            simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
            simpleBodyProduct.withGenericValue(genericValue);
            simpleBodyProduct.withOdatavalue(odatavalue);
        }
        Call<ResponseBody> call = service.postFlattenedSimpleProduct(simpleBodyProduct);
        final ServiceCall<SimpleProduct> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<SimpleProduct>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<SimpleProduct> clientResponse = postFlattenedSimpleProductDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<SimpleProduct> postFlattenedSimpleProductDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<SimpleProduct, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<SimpleProduct>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @param flattenParameterGroup Additional parameters for the operation
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the SimpleProduct object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<SimpleProduct> putSimpleProductWithGrouping(FlattenParameterGroup flattenParameterGroup) throws ErrorException, IOException, IllegalArgumentException {
        if (flattenParameterGroup == null) {
            throw new IllegalArgumentException("Parameter flattenParameterGroup is required and cannot be null.");
        }
        Validator.validate(flattenParameterGroup);
        String name = flattenParameterGroup.name();
        String productId = flattenParameterGroup.productId();
        String description = flattenParameterGroup.description();
        String maxProductDisplayName = flattenParameterGroup.maxProductDisplayName();
        String genericValue = flattenParameterGroup.genericValue();
        String odatavalue = flattenParameterGroup.odatavalue();
        SimpleProduct simpleBodyProduct = null;
        if (description != null || genericValue != null || odatavalue != null) {
            simpleBodyProduct = new SimpleProduct();
            simpleBodyProduct.withProductId(productId);
            simpleBodyProduct.withDescription(description);
            simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
            simpleBodyProduct.withGenericValue(genericValue);
            simpleBodyProduct.withOdatavalue(odatavalue);
        }
        Call<ResponseBody> call = service.putSimpleProductWithGrouping(name, simpleBodyProduct);
        return putSimpleProductWithGroupingDelegate(call.execute());
    }

    /**
     * Put Simple Product with client flattening true on the model.
     *
     * @param flattenParameterGroup Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<SimpleProduct> putSimpleProductWithGroupingAsync(FlattenParameterGroup flattenParameterGroup, final ServiceCallback<SimpleProduct> serviceCallback) {
        if (flattenParameterGroup == null) {
            throw new IllegalArgumentException("Parameter flattenParameterGroup is required and cannot be null.");
        }
        Validator.validate(flattenParameterGroup);
        String name = flattenParameterGroup.name();
        String productId = flattenParameterGroup.productId();
        String description = flattenParameterGroup.description();
        String maxProductDisplayName = flattenParameterGroup.maxProductDisplayName();
        String genericValue = flattenParameterGroup.genericValue();
        String odatavalue = flattenParameterGroup.odatavalue();
        SimpleProduct simpleBodyProduct = null;
        if (description != null || genericValue != null || odatavalue != null) {
            simpleBodyProduct = new SimpleProduct();
            simpleBodyProduct.withProductId(productId);
            simpleBodyProduct.withDescription(description);
            simpleBodyProduct.withMaxProductDisplayName(maxProductDisplayName);
            simpleBodyProduct.withGenericValue(genericValue);
            simpleBodyProduct.withOdatavalue(odatavalue);
        }
        Call<ResponseBody> call = service.putSimpleProductWithGrouping(name, simpleBodyProduct);
        final ServiceCall<SimpleProduct> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<SimpleProduct>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<SimpleProduct> clientResponse = putSimpleProductWithGroupingDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<SimpleProduct> putSimpleProductWithGroupingDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<SimpleProduct, ErrorException>(this.mapperAdapter())
                .register(200, new TypeToken<SimpleProduct>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
