/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import retrofit2.Retrofit;
import fixtures.http.HttpServerFailures;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.microsoft.rest.ServiceResponseEmptyCallback;
import fixtures.http.models.Error;
import fixtures.http.models.ErrorException;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.POST;
import retrofit2.Response;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpServerFailures.
 */
public final class HttpServerFailuresImpl implements HttpServerFailures {
    /** The Retrofit service to perform REST calls. */
    private HttpServerFailuresService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpServerFailures.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HttpServerFailuresImpl(Retrofit retrofit, AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = retrofit.create(HttpServerFailuresService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpServerFailures to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpServerFailuresService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @HEAD("http/failure/server/501")
        Call<Void> head501();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("http/failure/server/501")
        Call<ResponseBody> get501();

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("http/failure/server/505")
        Call<ResponseBody> post505(@Body Boolean booleanValue);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "http/failure/server/505", method = "DELETE", hasBody = true)
        Call<ResponseBody> delete505(@Body Boolean booleanValue);

    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> head501() throws ErrorException, IOException {
        Call<Void> call = service.head501();
        return head501Delegate(call.execute());
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> head501Async(final ServiceCallback<Error> serviceCallback) {
        Call<Void> call = service.head501();
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseEmptyCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                try {
                    ServiceResponse<Error> clientResponse = head501Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Error> head501Delegate(Response<Void> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>(this.client.mapperAdapter())
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get501() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get501();
        return get501Delegate(call.execute());
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> get501Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get501();
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Error> clientResponse = get501Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Error> get501Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>(this.client.mapperAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> post505() throws ErrorException, IOException {
        final Boolean booleanValue = null;
        Call<ResponseBody> call = service.post505(booleanValue);
        return post505Delegate(call.execute());
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> post505Async(final ServiceCallback<Error> serviceCallback) {
        final Boolean booleanValue = null;
        Call<ResponseBody> call = service.post505(booleanValue);
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Error> clientResponse = post505Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> post505(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.post505(booleanValue);
        return post505Delegate(call.execute());
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> post505Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.post505(booleanValue);
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Error> clientResponse = post505Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Error> post505Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>(this.client.mapperAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> delete505() throws ErrorException, IOException {
        final Boolean booleanValue = null;
        Call<ResponseBody> call = service.delete505(booleanValue);
        return delete505Delegate(call.execute());
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> delete505Async(final ServiceCallback<Error> serviceCallback) {
        final Boolean booleanValue = null;
        Call<ResponseBody> call = service.delete505(booleanValue);
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Error> clientResponse = delete505Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> delete505(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.delete505(booleanValue);
        return delete505Delegate(call.execute());
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Error> delete505Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.delete505(booleanValue);
        final ServiceCall<Error> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Error> clientResponse = delete505Delegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Error> delete505Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>(this.client.mapperAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

}
