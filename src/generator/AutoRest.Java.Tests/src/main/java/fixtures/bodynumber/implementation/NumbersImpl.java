/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber.implementation;

import retrofit2.Retrofit;
import fixtures.bodynumber.Numbers;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import fixtures.bodynumber.models.ErrorException;
import java.io.IOException;
import java.math.BigDecimal;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.Response;

/**
 * An instance of this class provides access to all the operations defined
 * in Numbers.
 */
public final class NumbersImpl implements Numbers {
    /** The Retrofit service to perform REST calls. */
    private NumbersService service;
    /** The service client containing this operation class. */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of Numbers.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(Retrofit retrofit, AutoRestNumberTestServiceImpl client) {
        this.service = retrofit.create(NumbersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Numbers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NumbersService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/null")
        Call<ResponseBody> getNull();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invalidfloat")
        Call<ResponseBody> getInvalidFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invaliddouble")
        Call<ResponseBody> getInvalidDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invaliddecimal")
        Call<ResponseBody> getInvalidDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/float/3.402823e+20")
        Call<ResponseBody> putBigFloat(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/float/3.402823e+20")
        Call<ResponseBody> getBigFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/2.5976931e+101")
        Call<ResponseBody> putBigDouble(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/2.5976931e+101")
        Call<ResponseBody> getBigDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/99999999.99")
        Call<ResponseBody> putBigDoublePositiveDecimal(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/99999999.99")
        Call<ResponseBody> getBigDoublePositiveDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/-99999999.99")
        Call<ResponseBody> putBigDoubleNegativeDecimal(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/-99999999.99")
        Call<ResponseBody> getBigDoubleNegativeDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/2.5976931e+101")
        Call<ResponseBody> putBigDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/2.5976931e+101")
        Call<ResponseBody> getBigDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/99999999.99")
        Call<ResponseBody> putBigDecimalPositiveDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/99999999.99")
        Call<ResponseBody> getBigDecimalPositiveDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/-99999999.99")
        Call<ResponseBody> putBigDecimalNegativeDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/-99999999.99")
        Call<ResponseBody> getBigDecimalNegativeDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/float/3.402823e-20")
        Call<ResponseBody> putSmallFloat(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/float/3.402823e-20")
        Call<ResponseBody> getSmallFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/double/2.5976931e-101")
        Call<ResponseBody> putSmallDouble(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/double/2.5976931e-101")
        Call<ResponseBody> getSmallDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/decimal/2.5976931e-101")
        Call<ResponseBody> putSmallDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/decimal/2.5976931e-101")
        Call<ResponseBody> getSmallDecimal();

    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getNull() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getNull();
        return getNullDelegate(call.execute());
    }

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getNullAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getNull();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getNullDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getNullDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getInvalidFloat() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getInvalidFloat();
        return getInvalidFloatDelegate(call.execute());
    }

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getInvalidFloat();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getInvalidFloatDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getInvalidFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getInvalidDouble() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getInvalidDouble();
        return getInvalidDoubleDelegate(call.execute());
    }

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getInvalidDouble();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getInvalidDoubleDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getInvalidDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the BigDecimal object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<BigDecimal> getInvalidDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getInvalidDecimal();
        return getInvalidDecimalDelegate(call.execute());
    }

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<BigDecimal> getInvalidDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        Call<ResponseBody> call = service.getInvalidDecimal();
        final ServiceCall<BigDecimal> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<BigDecimal>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<BigDecimal> clientResponse = getInvalidDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<BigDecimal> getInvalidDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigFloat(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putBigFloat(numberBody);
        return putBigFloatDelegate(call.execute());
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putBigFloat(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigFloatDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getBigFloat() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigFloat();
        return getBigFloatDelegate(call.execute());
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getBigFloatAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getBigFloat();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getBigFloatDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getBigFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDouble(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putBigDouble(numberBody);
        return putBigDoubleDelegate(call.execute());
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putBigDouble(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDoubleDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getBigDouble() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDouble();
        return getBigDoubleDelegate(call.execute());
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getBigDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getBigDouble();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getBigDoubleDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getBigDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDoublePositiveDecimal(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putBigDoublePositiveDecimal(numberBody);
        return putBigDoublePositiveDecimalDelegate(call.execute());
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putBigDoublePositiveDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDoublePositiveDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDoublePositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getBigDoublePositiveDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDoublePositiveDecimal();
        return getBigDoublePositiveDecimalDelegate(call.execute());
    }

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getBigDoublePositiveDecimal();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getBigDoublePositiveDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getBigDoublePositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDoubleNegativeDecimal(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putBigDoubleNegativeDecimal(numberBody);
        return putBigDoubleNegativeDecimalDelegate(call.execute());
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putBigDoubleNegativeDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDoubleNegativeDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDoubleNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getBigDoubleNegativeDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDoubleNegativeDecimal();
        return getBigDoubleNegativeDecimalDelegate(call.execute());
    }

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getBigDoubleNegativeDecimal();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getBigDoubleNegativeDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getBigDoubleNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDecimal(BigDecimal numberBody) throws ErrorException, IOException, IllegalArgumentException {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimal(numberBody);
        return putBigDecimalDelegate(call.execute());
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the BigDecimal object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<BigDecimal> getBigDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDecimal();
        return getBigDecimalDelegate(call.execute());
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<BigDecimal> getBigDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        Call<ResponseBody> call = service.getBigDecimal();
        final ServiceCall<BigDecimal> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<BigDecimal>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<BigDecimal> clientResponse = getBigDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<BigDecimal> getBigDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDecimalPositiveDecimal(BigDecimal numberBody) throws ErrorException, IOException, IllegalArgumentException {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimalPositiveDecimal(numberBody);
        return putBigDecimalPositiveDecimalDelegate(call.execute());
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimalPositiveDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDecimalPositiveDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDecimalPositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the BigDecimal object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<BigDecimal> getBigDecimalPositiveDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDecimalPositiveDecimal();
        return getBigDecimalPositiveDecimalDelegate(call.execute());
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<BigDecimal> getBigDecimalPositiveDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        Call<ResponseBody> call = service.getBigDecimalPositiveDecimal();
        final ServiceCall<BigDecimal> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<BigDecimal>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<BigDecimal> clientResponse = getBigDecimalPositiveDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<BigDecimal> getBigDecimalPositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putBigDecimalNegativeDecimal(BigDecimal numberBody) throws ErrorException, IOException, IllegalArgumentException {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimalNegativeDecimal(numberBody);
        return putBigDecimalNegativeDecimalDelegate(call.execute());
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putBigDecimalNegativeDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putBigDecimalNegativeDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putBigDecimalNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the BigDecimal object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<BigDecimal> getBigDecimalNegativeDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getBigDecimalNegativeDecimal();
        return getBigDecimalNegativeDecimalDelegate(call.execute());
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<BigDecimal> getBigDecimalNegativeDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        Call<ResponseBody> call = service.getBigDecimalNegativeDecimal();
        final ServiceCall<BigDecimal> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<BigDecimal>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<BigDecimal> clientResponse = getBigDecimalNegativeDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<BigDecimal> getBigDecimalNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putSmallFloat(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putSmallFloat(numberBody);
        return putSmallFloatDelegate(call.execute());
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putSmallFloat(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putSmallFloatDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putSmallFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getSmallFloat() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getSmallFloat();
        return getSmallFloatDelegate(call.execute());
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getSmallFloatAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getSmallFloat();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getSmallFloatDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getSmallFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putSmallDouble(double numberBody) throws ErrorException, IOException {
        Call<ResponseBody> call = service.putSmallDouble(numberBody);
        return putSmallDoubleDelegate(call.execute());
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.putSmallDouble(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putSmallDoubleDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putSmallDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the double object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Double> getSmallDouble() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getSmallDouble();
        return getSmallDoubleDelegate(call.execute());
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Double> getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        Call<ResponseBody> call = service.getSmallDouble();
        final ServiceCall<Double> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Double>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Double> clientResponse = getSmallDoubleDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Double> getSmallDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putSmallDecimal(BigDecimal numberBody) throws ErrorException, IOException, IllegalArgumentException {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putSmallDecimal(numberBody);
        return putSmallDecimalDelegate(call.execute());
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<Void> putSmallDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putSmallDecimal(numberBody);
        final ServiceCall<Void> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<Void> clientResponse = putSmallDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Void> putSmallDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the BigDecimal object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<BigDecimal> getSmallDecimal() throws ErrorException, IOException {
        Call<ResponseBody> call = service.getSmallDecimal();
        return getSmallDecimalDelegate(call.execute());
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public ServiceCall<BigDecimal> getSmallDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        Call<ResponseBody> call = service.getSmallDecimal();
        final ServiceCall<BigDecimal> serviceCall = new ServiceCall<>(call);
        call.enqueue(new ServiceResponseCallback<BigDecimal>(serviceCall, serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    ServiceResponse<BigDecimal> clientResponse = getSmallDecimalDelegate(response);
                    if (serviceCallback != null) {
                        serviceCallback.success(clientResponse);
                    }
                    serviceCall.success(clientResponse);
                } catch (ErrorException | IOException exception) {
                    if (serviceCallback != null) {
                        serviceCallback.failure(exception);
                    }
                    serviceCall.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<BigDecimal> getSmallDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
