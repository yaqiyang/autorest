// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.Azure.AcceptanceTestsAzureSpecials
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for SubscriptionInCredentialsOperations.
    /// </summary>
    public static partial class SubscriptionInCredentialsOperationsExtensions
    {
            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostMethodGlobalValid(this ISubscriptionInCredentialsOperations operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISubscriptionInCredentialsOperations)s).PostMethodGlobalValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PostMethodGlobalValidAsync(this ISubscriptionInCredentialsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PostMethodGlobalValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to null, and client-side validation should
            /// prevent you from making this call
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostMethodGlobalNull(this ISubscriptionInCredentialsOperations operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISubscriptionInCredentialsOperations)s).PostMethodGlobalNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to null, and client-side validation should
            /// prevent you from making this call
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PostMethodGlobalNullAsync(this ISubscriptionInCredentialsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PostMethodGlobalNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostMethodGlobalNotProvidedValid(this ISubscriptionInCredentialsOperations operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISubscriptionInCredentialsOperations)s).PostMethodGlobalNotProvidedValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PostMethodGlobalNotProvidedValidAsync(this ISubscriptionInCredentialsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PostMethodGlobalNotProvidedValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostPathGlobalValid(this ISubscriptionInCredentialsOperations operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISubscriptionInCredentialsOperations)s).PostPathGlobalValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PostPathGlobalValidAsync(this ISubscriptionInCredentialsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PostPathGlobalValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostSwaggerGlobalValid(this ISubscriptionInCredentialsOperations operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISubscriptionInCredentialsOperations)s).PostSwaggerGlobalValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// POST method with subscriptionId modeled in credentials.  Set the
            /// credential subscriptionId to '1234-5678-9012-3456' to succeed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PostSwaggerGlobalValidAsync(this ISubscriptionInCredentialsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PostSwaggerGlobalValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

    }
}
