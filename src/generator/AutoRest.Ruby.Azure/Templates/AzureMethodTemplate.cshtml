@using System
@using AutoRest.Ruby
@using AutoRest.Ruby.TemplateModels
@using AutoRest.Ruby.Templates
@inherits AutoRest.Core.Template<AutoRest.Ruby.Azure.TemplateModels.AzureMethodTemplateModel>

@if (!Model.IsLongRunningOperation && !Model.IsPageable)
{
@:@(Include(new MethodTemplate(), (MethodTemplateModel)Model))
}
@if (Model.IsPageable) 
{
<text>
#
@if(!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.LocalParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param custom_headers [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", string.Format("@return [{0}] which provide lazy access to pages of the response.", Model.ReturnType))
#
def @(Model.Name)_as_lazy(@(Model.MethodParameterDeclaration))
  response = @(Model.Name)_async(@(Model.MethodParameterInvocation)).value!
  unless response.nil?
    page = response.body
    page.next_method = Proc.new do |next_link|
      @(Model.InvokeNextMethodAsync())
    end
    page
  end
end
</text>
}
@if (Model.IsLongRunningOperation)
{
<text>
#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.LocalParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param custom_headers [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@if (Model.ReturnType.Body != null)
{
@WrapComment("# ", string.Format("@return [{0}] operation results.", Model.OperationReturnTypeString))@:
@:#
}
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  @Model.ResponseGeneration()
end
@EmptyLine
#
@foreach (var parameter in Model.LocalParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param custom_headers [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", "@return [Concurrent::Promise] promise which provides async access to http response.")
#
def @(Model.Name)_async(@(Model.MethodParameterDeclaration))
  # Send request
  promise = begin_@(Model.Name)_async(@(Model.MethodParameterInvocation))
  @EmptyLine

  promise = promise.then do |response|
    # Defining deserialization method.
    deserialize_method = lambda do |parsed_response|
    @if (Model.ReturnType.Body != null)
    {
      @:@(Model.DeserializePollingResponse("parsed_response", Model.ReturnType.Body))
    }
    end

    @EmptyLine
    # Waiting for response.
    @(Model.ClientReference).get_long_running_operation_result(response, deserialize_method)
  end

  @EmptyLine
  promise
end
</text>
}
