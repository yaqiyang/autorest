// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.MirrorRecursiveTypes.Models
{
    using System.Linq;

    public partial class Product
    {
        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        public Product() { }

        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        /// <param name="productId">Unique identifier representing a specific
        /// product for a given latitude & longitude. For example, uberX in
        /// San Francisco will have a different product_id than uberX in Los
        /// Angeles.</param>
        public Product(string productId = default(string), Product parentProduct = default(Product), System.Collections.Generic.IList<Product> innerProducts = default(System.Collections.Generic.IList<Product>))
        {
            ProductId = productId;
            ParentProduct = parentProduct;
            InnerProducts = innerProducts;
        }

        /// <summary>
        /// Gets or sets unique identifier representing a specific product for
        /// a given latitude &amp; longitude. For example, uberX in San
        /// Francisco will have a different product_id than uberX in Los
        /// Angeles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "product_id")]
        public string ProductId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentProduct")]
        public Product ParentProduct { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "innerProducts")]
        public System.Collections.Generic.IList<Product> InnerProducts { get; set; }

    }
}
