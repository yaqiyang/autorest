// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.AcceptanceTestsCustomBaseUriMoreOptions
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Paths.
    /// </summary>
    public static partial class PathsExtensions
    {
            /// <summary>
            /// Get a 200 to test a valid base uri
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault
            /// </param>
            /// <param name='secret'>
            /// Secret value.
            /// </param>
            /// <param name='keyName'>
            /// The key name with value 'key1'.
            /// </param>
            /// <param name='keyVersion'>
            /// The key version. Default value 'v1'.
            /// </param>
            public static void GetEmpty(this IPaths operations, string vault, string secret, string keyName, string keyVersion = "v1")
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IPaths)s).GetEmptyAsync(vault, secret, keyName, keyVersion), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a 200 to test a valid base uri
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault
            /// </param>
            /// <param name='secret'>
            /// Secret value.
            /// </param>
            /// <param name='keyName'>
            /// The key name with value 'key1'.
            /// </param>
            /// <param name='keyVersion'>
            /// The key version. Default value 'v1'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task GetEmptyAsync(this IPaths operations, string vault, string secret, string keyName, string keyVersion = "v1", System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.GetEmptyWithHttpMessagesAsync(vault, secret, keyName, keyVersion, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
