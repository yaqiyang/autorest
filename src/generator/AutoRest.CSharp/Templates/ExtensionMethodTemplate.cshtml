@using System.Text
@using System
@using AutoRest.Core.ClientModel
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@inherits AutoRest.Core.Template<AutoRest.CSharp.TemplateModels.MethodTemplateModel>
@{
if (Model.SyncMethods == SyncMethodsGenerationMode.All || Model.SyncMethods == SyncMethodsGenerationMode.Essential)
{
    if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
    {
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
        if (!String.IsNullOrEmpty(Model.ExternalDocsUrl))
        {
@:/// <see href="@Model.ExternalDocsUrl" />
        }
@:/// </summary>
    }
    if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
    {
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
    }
@:/// <param name='operations'>
@:/// The operations group for this extension method.
@:/// </param>
    foreach (var parameter in Model.LocalParameters)
    {
@:/// <param name='@parameter.Name'>
@:@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())
@:/// </param>
    }
@:public static @Model.ReturnTypeString @(Model.Name)(@Model.GetExtensionParameters(Model.GetSyncMethodParameterDeclaration(false)))
@:{
    if (Model.ReturnType.Body != null)
    {
    @:return System.Threading.Tasks.Task.Factory.StartNew(s => ((I@(Model.MethodGroupName))s).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
    }
    else if (Model.ReturnType.Headers != null)
    {
    @:return System.Threading.Tasks.Task.Factory.StartNew(s => ((I@(Model.MethodGroupName))s).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
    }
    else
    {
    @:System.Threading.Tasks.Task.Factory.StartNew(s => ((I@(Model.MethodGroupName))s).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
    }
@:}
@EmptyLine
}

if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!String.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@:/// <param name='operations'>
@:/// The operations group for this extension method.
@:/// </param>
foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@:@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())
@:/// </param>
}
@:/// <param name='cancellationToken'>
@:/// The cancellation token.
@:/// </param>
@:public static async @Model.TaskExtensionReturnTypeString @(Model.Name)Async(@Model.GetExtensionParameters(Model.GetAsyncMethodParameterDeclaration()))
@:{
    if (Model.ReturnType.Body != null)
    {
        if (Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {
    @:var _result = await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false);
    @:_result.Request.Dispose();
    @:return _result.Body;
        }
        else
        {
    @:using (var _result = await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false))
    @:{
    @:    return _result.Body;
    @:}
        }
    }
    else if (Model.ReturnType.Headers != null)
    {
    @:using (var _result = await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false))
    @:{
    @:    return _result.Headers;
    @:}
    }
    else
    {
    @:await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false);
    }
@:}

    if (Model.SyncMethods == SyncMethodsGenerationMode.All)
    {
@EmptyLine
    if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
    {
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
        if (!String.IsNullOrEmpty(Model.ExternalDocsUrl))
        {
@:/// <see href="@Model.ExternalDocsUrl" />
        }
@:/// </summary>
    }
    if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
    {
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
    }
@:/// <param name='operations'>
@:/// The operations group for this extension method.
@:/// </param>
    foreach (var parameter in Model.LocalParameters)
    {
@:/// <param name='@parameter.Name'>
@:@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())
@:/// </param>
    }
@:/// <param name='customHeaders'>
@:/// Headers that will be added to request.
@:/// </param>
@:public static @Model.OperationResponseReturnTypeString @(Model.Name)WithHttpMessages(@Model.GetExtensionParameters(Model.GetSyncMethodParameterDeclaration(true)))
@:{
@:    return operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("customHeaders", "System.Threading.CancellationToken.None"))).ConfigureAwait(false).GetAwaiter().GetResult();
@:}
@:
    }
}