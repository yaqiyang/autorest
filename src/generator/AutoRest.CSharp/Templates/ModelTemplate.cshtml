@using System.Linq
@using AutoRest.Core
@using AutoRest.Core.ClientModel
@using AutoRest.Core.Utilities
@inherits Template<global::AutoRest.CSharp.TemplateModels.ModelTemplateModel>
@Header("// ")
@EmptyLine
namespace @(Settings.Namespace).@(Settings.ModelsName)
{
    using System.Linq;
@EmptyLine

@if (!string.IsNullOrEmpty(Model.Summary) || !string.IsNullOrWhiteSpace(Model.Documentation))
{
    @:/// <summary>
    @:@WrapComment("/// ", (string.IsNullOrEmpty(Model.Summary) ? Model.Documentation : Model.Summary).EscapeXmlComment())
        if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
        {
    @:/// <see href="@Model.ExternalDocsUrl" />
        }
    @:/// </summary>
}
@if (!string.IsNullOrEmpty(Model.Summary) && !string.IsNullOrWhiteSpace(Model.Documentation))
{
    @:/// <remarks>
    @:@WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    @:/// </remarks>
}

    @if (Model.NeedsPolymorphicConverter)
    {
    @:[Newtonsoft.Json.JsonObject("@Model.SerializedName")]
    }

    @if (Model.NeedsTransformationConverter)
    {
    @:[Microsoft.Rest.Serialization.JsonTransformation]
    }

    public partial class @Model.Name@(Model.BaseModelType != null ? " : " + Model.BaseModelType.Name : "")
    {
        /// <summary>
        @WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        /// </summary>
        @if (Model.Properties.Any(p => p.Type is CompositeType && ((CompositeType)p.Type).ContainsConstantProperties))
        {
<text>
        public @(Model.Name)()
        {
            @foreach(var property in Model.ComposedProperties.Where(p => p.Type is CompositeType
                && !p.IsConstant
                && p.IsRequired
                && ((CompositeType)p.Type).ContainsConstantProperties))
            {
            @:@(property.Name) = new @(property.Type.Name)();
            }
        }
</text>
        }
        else
        {
        @:public @(Model.Name)() { }
        }
        

        @EmptyLine

        @if (!string.IsNullOrEmpty(Model.ConstructorParameters))
        {
        @:/// <summary>
        @:@WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        @:/// </summary>
        foreach (var parameter in Model.ConstructorParametersDocumentation)
        {
        @:@WrapComment("/// ", parameter)
        }
        @:public @(Model.Name)(@Model.ConstructorParameters)
            if (!string.IsNullOrEmpty(Model.BaseConstructorCall))
            {
            @:@(Model.BaseConstructorCall)
            }
        @:{

            @foreach (var property in Model.ComposedProperties.Where(p => p.Type is CompositeType
                     && !p.IsConstant
                     && p.IsRequired
                     && ((CompositeType)p.Type).ContainsConstantProperties))
            {
            @:@(property.Name) = new @(property.Type.Name)();
            }

            foreach (var property in Model.Properties.Where(p => !p.IsConstant))
            {
            @:@(property.Name) = @(CodeNamer.CamelCase(property.Name));
            }            

        @:}
        }

        @if (Model.PropertyTemplateModels.Any(p => p.IsConstant))
        {
        @:/// <summary>
        @:@WrapComment("/// ", ("Static constructor for " + Model.Name + " class.").EscapeXmlComment())
        @:/// </summary>
        @:static @(Model.Name)()
        @:{
            @foreach (var property in Model.PropertyTemplateModels.Where(p => p.IsConstant))
            {
            @:@(property.Name) = @(property.DefaultValue);
            }
        @:}
        }

        @EmptyLine
        @foreach (var property in Model.PropertyTemplateModels.Where(p => !p.IsConstant))
        {
        @:/// <summary>
        @:@WrapComment("/// ", property.GetFormattedPropertySummary())
        @:/// </summary>
            if(!string.IsNullOrEmpty(property.Summary) && !string.IsNullOrEmpty(property.Documentation))
            { 
        @:/// <remarks>
        @:@WrapComment("/// ", property.Documentation)
        @:/// </remarks>
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.Date))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateJsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.DateTimeRfc1123))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateTimeRfc1123JsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.Base64Url))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.Base64UrlJsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.UnixTime))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.UnixTimeJsonConverter))]
            }

            if (property.Type is DictionaryType && (property.Type as DictionaryType).SupportsAdditionalProperties)
            {
        @:[Newtonsoft.Json.JsonExtensionData]
            }
            else
            {
        @:[Newtonsoft.Json.JsonProperty(PropertyName = "@property.SerializedName")]
            }
        @:public @property.Type.Name @property.Name { get; @(property.IsReadOnly ? "private " : "")set; }
        @EmptyLine
        }

        @foreach (var property in Model.PropertyTemplateModels.Where(p => p.IsConstant))
        {
        @:/// <summary>
        @:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
        @:/// </summary>
            if (property.Type.IsPrimaryType(KnownPrimaryType.Date))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(DateJsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.DateTimeRfc1123))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.Base64Url))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(Base64UrlJsonConverter))]
            }
            if (property.Type.IsPrimaryType(KnownPrimaryType.UnixTime))
            {
        @:[Newtonsoft.Json.JsonConverter(typeof(UnixTimeJsonConverter))]
            }
        @:[Newtonsoft.Json.JsonProperty(PropertyName = "@property.SerializedName")]
        @:public static @property.Type.Name @property.Name { get; private set; }
        @EmptyLine
        }
@if(@Model.ShouldValidateChain())
{
        @:/// <summary>
        @:/// Validate the object.
        @:/// </summary>
        @:/// <exception cref="Microsoft.Rest.ValidationException">
        @:/// Thrown if validation fails
        @:/// </exception>
        @:public @Model.MethodQualifier void Validate()
        @:{
            bool anythingToValidate = false;

            if (Model.BaseModelType != null && Model.BaseModelType.ShouldValidateChain())
            {
                anythingToValidate = true;
            @:base.Validate();
            }

            foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsReadOnly && !p.IsConstant && !p.Type.IsValueType()))
            {
                anythingToValidate = true;
            @:if (@property.Name == null)
            @:{
                @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "@property.Name");
            @:}
            @:
            }
            foreach (var property in Model.Properties.Where(p => !p.IsConstant 
                && (p.Constraints.Any() || !(p.Type is PrimaryType))))
            {
                anythingToValidate = true;
            @:@property.Type.ValidateType(Model.Scope, string.Format("this.{0}", property.Name), property.Constraints)
            @:
            }
            if (!anythingToValidate)
            {
            @://Nothing to validate
            }
        @:}
        }
    }
}
