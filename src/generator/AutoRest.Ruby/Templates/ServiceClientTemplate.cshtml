@using AutoRest.Ruby.Templates
@using System.Linq
@using AutoRest.Ruby
@inherits AutoRest.Core.Template<AutoRest.Ruby.TemplateModels.ServiceClientTemplateModel>
# encoding: utf-8
@Header("# ")
@EmptyLine
module @Settings.Namespace
  #
  # A service client - single point of access to the REST API.
  #
  class @Model.Name < @Model.BaseType

@foreach (var include in Model.Includes)
{
    @:include @include
}
    @Model.IncludeSerializer
    @EmptyLine

    # @@return [String] the base URI of the service.
    @(Model.IsCustomBaseUri ? "attr_reader" : "attr_accessor") :base_url
@EmptyLine

@foreach (var property in Model.Properties)
{
    @:@WrapComment("# ", string.Format("@return {0}{1}", property.Type.GetYardDocumentation(), property.Documentation))
    @:@(property.IsReadOnly ? "attr_reader" : "attr_accessor") :@property.Name
@EmptyLine
}

@foreach (var operation in Model.MethodGroups)
{
    @:@WrapComment("# ", string.Format("@return [{0}] {1}", operation, RubyCodeNamer.UnderscoreCase(operation)))
    @:attr_reader :@(RubyCodeNamer.UnderscoreCase(operation))
@EmptyLine
}

    #
    # Creates initializes a new instance of the @Model.Name class.
    # @@param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    @if (!Model.IsCustomBaseUri)
    {
    @:# @@param base_url [String] the base URI of the service.
    }
    # @@param options [Array] filters to be applied to the HTTP requests.
    #
    @if (!Model.IsCustomBaseUri)
    {
    @:def initialize(credentials, base_url = nil, options = nil)
    }
    else
    {
    @:def initialize(credentials, options = nil)
    }
      super(credentials, options)
      @if (!Model.IsCustomBaseUri)
      {
      @:@@base_url = base_url || '@Model.BaseUrl'
      }
      else
      {
      @:@@base_url = '@Model.BaseUrl'
      }
      @EmptyLine
      fail ArgumentError, 'credentials is nil' if credentials.nil?
      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials)
      @@credentials = credentials
      @EmptyLine
      @foreach (var operation in Model.MethodGroups)
      {
      @:@@@(RubyCodeNamer.UnderscoreCase(operation)) = @(operation).new(self)
      }

      @foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
      {
      @:@@@(property.Name) = @(property.DefaultValue)
      }
    end

    @EmptyLine
    @foreach (var method in Model.MethodTemplateModels)
    {
    @:@(Include(new MethodTemplate(), method))
    @EmptyLine
    @:
    }
  end
end
