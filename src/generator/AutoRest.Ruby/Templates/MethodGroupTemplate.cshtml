@using AutoRest.Ruby.Templates
@inherits AutoRest.Core.Template<AutoRest.Ruby.TemplateModels.MethodGroupTemplateModel>
# encoding: utf-8
@Header("# ")
@EmptyLine
module @Settings.Namespace
  #
  @WrapComment("# ", string.IsNullOrEmpty(Model.Documentation) ? Model.MethodGroupName : Model.Documentation)
  #
  class @(Model.MethodGroupName)
@if (Model.HasModelTypes)
{
    @:include @(Settings.Namespace)::Models
}
@foreach (var include in Model.Includes)
{
    @:include @include
}
    @EmptyLine

    #
    # Creates and initializes a new instance of the @Model.MethodGroupName class.
    # @@param client service class for accessing basic functionality.
    #
    def initialize(client)
      @@client = client
    end

    @EmptyLine
    # @@return [@(Model.Name)] reference to the @(Model.Name)
    attr_reader :client

    @EmptyLine
    @foreach (var method in Model.MethodTemplateModels)
    {
    @:@(Include(new MethodTemplate(), method))
    @EmptyLine
    }
  end
end
