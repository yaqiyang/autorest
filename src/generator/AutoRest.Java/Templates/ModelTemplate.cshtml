@using System.Linq
@using System.Collections.Generic
@using AutoRest.Core.ClientModel
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.TypeModels
@inherits AutoRest.Core.Template<AutoRest.Java.TemplateModels.ModelTemplateModel>
/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

package @(Settings.Namespace.ToLower())@Model.ModelsPackage;
@EmptyLine

@foreach (var importClass in Model.ImportList)
{
@:import @importClass;
}
@EmptyLine

/**
@if (string.IsNullOrEmpty(Model.Summary) && string.IsNullOrEmpty(Model.Documentation))
{
@:@WrapComment(" * ", "The " + Model.Name + " model.")
}
else
{
@:@WrapComment(" * ", Model.Summary.EscapeXmlComment().Period())
@:@WrapComment(" * ", Model.Documentation.EscapeXmlComment().Period())
}
 */
@if (Model.IsPolymorphic)
{
@:@@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@(Model.EvaluatedPolymorphicDiscriminator)")
@:@@JsonTypeName("@(Model.SerializedName)")
var types = Model.SubTypes.ToList();
if (types.Any())
{
@:@@JsonSubTypes({
for (int i = 0; i < types.Count - 1; i++)
{
var type = types[i];
@:    @@JsonSubTypes.Type(name = "@(type.SerializedName)", value = @(type.Name).class),
}
@:    @@JsonSubTypes.Type(name = "@(types.Last().SerializedName)", value = @(types.Last().Name).class)
@:})
}
}
@if (Model.NeedsFlatten)
{
@:@@JsonFlatten
}
public class @(Model.Name)@(Model.BaseModelType != null ? " extends " + Model.BaseModelType.Name.ToPascalCase() : "") {
@foreach (var property in Model.Properties)
{
@:    /**
if (string.IsNullOrEmpty(property.Summary) && string.IsNullOrEmpty(property.Documentation))
{
@:    @WrapComment(" * ", "The " + property.Name + " property.")
}
else
{
@:    @WrapComment(" * ", property.Summary.EscapeXmlComment().Period())
@:    @WrapComment(" * ", property.Documentation.EscapeXmlComment().Period())
}
@:     */
var jsonSetting = property.GetJsonProperty();
if (!jsonSetting.IsNullOrEmpty())
{
@:    @@JsonProperty(@(jsonSetting))
}
@:    private @property.Type @property.Name;
@EmptyLine
}

@if (Model.Properties.Any(p => p.IsConstant))
{
<text>
    /**
     * Creates an instance of @(Model.Name) class.
     */
    public @(Model.Name)() {
    @foreach (var property in Model.Properties.Where(p => p.IsConstant))
    {
        if (property.Type is CompositeType) {
        @:@(property.Name) = new @(property.Type.Name)();
        }
        else
        {
        @:@(property.Name) = @(property.DefaultValue);
        }
    }
    }
@EmptyLine
</text>
}

@foreach (PropertyModel property in Model.PropertyModels)
{
@:    /**
@:     * Get the @property.Name value.
@:     *
@:     * @@return the @property.Name value
@:     */
@:    public @(((ITypeModel)property.Type).ResponseVariant) @(property.Name.ToCamelCase())() {
if (property.Type.Name != ((ITypeModel) property.Type).ResponseVariant.Name)
{
@:        if (this.@(property.Name) == null) {
@:            return null;
@:        }
@:        return @(property.ClientForm);
}
else
{
@:        return this.@(property.Name);
}
@:    }
@EmptyLine
if (!property.IsReadOnly)
{
@:    /**
@:     * Set the @property.Name value.
@:     *
@:     * @@param @property.Name the @property.Name value to set
@:     * @@return the @(Model.Name) object itself.
@:     */
@:    public @(Model.Name) with@(property.Name.ToPascalCase())(@(((ITypeModel)property.Type).ResponseVariant) @property.Name) {
if (property.Type.Name != ((ITypeModel)property.Type).ResponseVariant.Name)
{
@:        if (@property.Name == null) {
@:            this.@(property.Name) = null;
@:        } else {
@:            this.@(property.Name) = @(property.FromClientForm);
@:        }
}
else
{
@:        this.@(property.Name) = @property.Name;
}
@:        return this;
@:    }
@EmptyLine
}
}
}