@using System;
@using System.Linq;
@using AutoRest.Python
@using AutoRest.Python.TemplateModels
@using AutoRest.Python.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Azure.TemplateModels.AzureMethodTemplateModel>
    def @(Model.Name.ToPythonCase())(
            self, @(Model.MethodParameterDeclaration(true))):
        """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@EmptyLine
@*need to fix comment here for paging function*@
@foreach(var parameter in Model.DocumentationParameters)
{
@:        @ParameterWrapComment(string.Empty, MethodTemplateModel.GetParameterDocumentationString(parameter))
@:        @ParameterWrapComment(string.Empty, ":type " + parameter.Name + ": " + Model.GetDocumentationType(parameter.Type))
}
        @ParameterWrapComment(string.Empty, ":param dict custom_headers: headers that will be added to the request")
        @ParameterWrapComment(string.Empty, ":param bool raw: returns the direct response alongside the deserialized response")
        @ParameterWrapComment(string.Empty, ":param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.")
        @ParameterWrapComment(string.Empty, string.Format(":rtype: {0}", Model.GetDocumentationType(Model.ReturnType.Body)))
        """
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
@if (Model.ConstantParameters.Any())
{
	foreach (var parameter in Model.ConstantParameters)
	{
        @:@(parameter.Name) = @(parameter.DefaultValue)
	}
@EmptyLine
}
        def internal_paging(next_link=None, raw=False):
@EmptyLine
            if not next_link:
                # Construct URL
                url = '@(Model.Url)'
                @(Model.BuildUrlPath("url"))
@EmptyLine
                # Construct parameters
                query_parameters = {}
                @(Model.BuildUrlQuery("query_parameters"))
@EmptyLine
            else:
                url = next_link
                query_parameters = {}
@EmptyLine
            # Construct headers
            header_parameters = {}
            header_parameters['Content-Type'] = '@(Model.RequestContentType)'
            @(Model.SetDefaultHeaders)
            @(Model.BuildHeaders("header_parameters"))
@EmptyLine
@if (Model.RequestBody != null)
{
            @:# Construct body
  if (Model.RequestBody.IsRequired)
  {
            @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.Type.ToPythonRuntimeTypeString())')
  }
  else
  {
            @:if @Model.RequestBody.Name is not None:
                @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.Type.ToPythonRuntimeTypeString())')
            @:else:
                @:body_content = None
  }
@EmptyLine
}
            # Construct and send request
            request = self._client.@(MethodTemplateModel.GetHttpFunction(Model.HttpMethod))(url, query_parameters)
@if (Model.RequestBody != null)
{
            @:response = self._client.send(
                @:request, header_parameters, body_content, **operation_config)
}
else
{
            @:response = self._client.send(
                @:request, header_parameters, **operation_config)
}
@EmptyLine
            if @Model.FailureStatusCodePredicate:
                @Model.RaisedException
@EmptyLine
            return response
@EmptyLine
        # Deserialize response
        deserialized = @(Model.PagedResponseClassName)(internal_paging, self._deserialize.dependencies)
@EmptyLine
        if raw:
            @Model.AddIndividualResponseHeader(null)
            client_raw_response = @(Model.PagedResponseClassName)(internal_paging, self._deserialize.dependencies, header_dict)
            return client_raw_response
@EmptyLine
        return deserialized
