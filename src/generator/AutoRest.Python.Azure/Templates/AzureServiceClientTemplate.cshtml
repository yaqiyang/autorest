@using AutoRest.Python.Templates
@using System.Linq
@using AutoRest.Core.ClientModel
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Azure.TemplateModels
@using AutoRest.Python.Azure.Templates
@using AutoRest.Python.TemplateModels
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Azure.TemplateModels.AzureServiceClientTemplateModel>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
from msrest.service_client import ServiceClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
@if (Model.MethodTemplateModels.Any())
{
<text>
from msrest.pipeline import ClientRawResponse
@if(Model.HasAnyCloudErrors)
{
@:from msrestazure.azure_exceptions import CloudError
}
@if (Model.HasAnyLongRunOperation)
{
@:from msrestazure.azure_operation import AzureOperationPoller
}
import uuid
</text>
}
@if (Model.MethodGroupModels.Any())
{
  foreach (var modelGroupType in Model.MethodGroupModels)
  {
@:from .operations.@(modelGroupType.MethodGroupType.ToPythonCase()) import @modelGroupType.MethodGroupType
  }
}
@if (Model.HasAnyModel)
{
@:from . import models
}
@EmptyLine
@EmptyLine
class @(Model.Name)Configuration(AzureConfiguration):
    """Configuration for @(Model.Name)
    Note that all parameters used to create this instance are saved as instance
    attributes.
@EmptyLine
@foreach(var property in Model.Properties)
{
@:    @ParameterWrapComment(string.Empty, ServiceClientTemplateModel.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.Type))
}
@foreach(var property in Model.ConstantProperties)
{
@:    @ParameterWrapComment(string.Empty, ServiceClientTemplateModel.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.Type))
}

@if (!Model.IsCustomBaseUri)
{ 
@:    :param str base_url: Service URL
}
    :param str filepath: Existing config
    """
@EmptyLine
    def __init__(
            self, @(Model.RequiredConstructorParameters)@(Model.IsCustomBaseUri ? "" : "base_url=None, ")filepath=None):
@EmptyLine
        @Model.ValidateRequiredParameters

@if (Model.IsCustomBaseUri)
{
@:        base_url = '@Model.BaseUrl'
}
else
{
@:        if not base_url:
@:            base_url = '@Model.BaseUrl'
}

@EmptyLine
        super(@(Model.Name)Configuration, self).__init__(base_url, filepath)
@EmptyLine
        self.add_user_agent('@Model.UserAgent/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')
@if (Model.Properties.Any())
{
@EmptyLine
  foreach (var property in Model.Properties)
  {
        @:self.@(property.Name) = @(property.Name)
  }
  foreach (var property in Model.ConstantProperties)
  {
        @:self.@(property.Name) = @(property.DefaultValue)
  }
}
@EmptyLine
@EmptyLine
class @(Model.Name)(object):
    """@Model.ServiceDocument
    @EmptyLine
    :ivar config: Configuration for client.
    :vartype config: @(Model.Name)Configuration
@if (Model.MethodGroupModels.Any())
{
    @EmptyLine
    foreach (var methodGroup in Model.MethodGroupModels)
    {
@:    :ivar @(methodGroup.MethodGroupName.ToPythonCase()): @(methodGroup.MethodGroupName) operations
@:    :vartype @(methodGroup.MethodGroupName.ToPythonCase()): .operations.@(methodGroup.MethodGroupType)
    }
}
@EmptyLine
@foreach (var property in Model.Properties)
{
@:    @ParameterWrapComment(string.Empty, ServiceClientTemplateModel.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.Type))
}

@if (!Model.IsCustomBaseUri)
{
@:    :param str base_url: Service URL
}
    :param str filepath: Existing config
    """
@EmptyLine
    def __init__(
            self, @(Model.RequiredConstructorParameters)@(Model.IsCustomBaseUri ? "" : "base_url=None, ")filepath=None):
@EmptyLine
        self.config = @(Model.Name)Configuration(@(Model.ConfigConstructorParameters)@(Model.IsCustomBaseUri ? "" : "base_url, ")filepath)
        self._client = ServiceClient(@(Model.Properties.Any(p => p.Type.IsPrimaryType(KnownPrimaryType.Credentials)) ? "self.config.credentials" : PythonConstants.None), self.config)
@EmptyLine
@if (Model.ModelTemplateModels.Any())
{
        @:client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
}
else
{
        @:client_models = {}
}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
@EmptyLine
@foreach (var methodGroup in Model.MethodGroupModels)
{
        @:self.@(methodGroup.MethodGroupName.ToPythonCase()) = @(methodGroup.MethodGroupType)(
            @:self._client, self.config, self._serialize, self._deserialize)
}
@foreach (var method in Model.MethodTemplateModels)
{
@EmptyLine
@(Include(new AzureMethodTemplate(), (AzureMethodTemplateModel)method))
}
