<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoRestCore" xml:space="preserve">
    <value>AutoRest Core {0}</value>
  </data>
  <data name="CodeGenerationFailed" xml:space="preserve">
    <value>Code generation failed with errors. See inner exceptions for details.</value>
  </data>
  <data name="CodeGenSettingsFileInvalid" xml:space="preserve">
    <value>Could not load CodeGenSettings file '{0}'. Exception: '{1}'.</value>
  </data>
  <data name="CommentString" xml:space="preserve">
    <value>\\\\</value>
  </data>
  <data name="ConfigurationFileNotFound" xml:space="preserve">
    <value>AutoRest.json was not found in the current directory</value>
  </data>
  <data name="DirectoryNotExist" xml:space="preserve">
    <value>Directory {0} does not exist.</value>
  </data>
  <data name="EntityConflictTitleMessage" xml:space="preserve">
    <value>{0} with name '{1}' was renamed to '{2}' because it conflicts with following entities: {3}</value>
  </data>
  <data name="ErrorGeneratingClientModel" xml:space="preserve">
    <value>Error generating client model: {0}</value>
  </data>
  <data name="ErrorLoadingAssembly" xml:space="preserve">
    <value>Error loading {0} assembly: {1}</value>
  </data>
  <data name="ErrorParsingConfig" xml:space="preserve">
    <value>Error parsing AutoRest.json file</value>
  </data>
  <data name="ErrorSavingGeneratedCode" xml:space="preserve">
    <value>Error saving generated code: {0}</value>
  </data>
  <data name="ExtensionNotFound" xml:space="preserve">
    <value>Plugin {0} does not have an assembly name in AutoRest.json</value>
  </data>
  <data name="GeneratorInitialized" xml:space="preserve">
    <value>Successfully initialized {0} Code Generator {1}</value>
  </data>
  <data name="InitializingCodeGenerator" xml:space="preserve">
    <value>Initializing code generator.</value>
  </data>
  <data name="InitializingModeler" xml:space="preserve">
    <value>Initializing modeler.</value>
  </data>
  <data name="InvalidIdentifierName" xml:space="preserve">
    <value>Property name {0} cannot be used as an Identifier, as it contains only invalid characters.</value>
  </data>
  <data name="LanguageDoesNotSupportSingleFileGeneration" xml:space="preserve">
    <value>'{0}' code generator does not support code generation to a single file.</value>
  </data>
  <data name="ModelerInitialized" xml:space="preserve">
    <value>Successfully initialized modeler {0} v {1}.</value>
  </data>
  <data name="NamespaceConflictReasonMessage" xml:space="preserve">
    <value>{0} (already used in {1})</value>
  </data>
  <data name="NamingConflictsSuggestion" xml:space="preserve">
    <value>Please consider changing your swagger specification to avoid naming conflicts.</value>
  </data>
  <data name="ParameterIsNotValid" xml:space="preserve">
    <value>Parameter '{0}' is not expected.</value>
  </data>
  <data name="ParameterValueIsMissing" xml:space="preserve">
    <value>Parameter '{0}' is required.</value>
  </data>
  <data name="ParameterValueIsNotValid" xml:space="preserve">
    <value>Parameter '{0}' value is not valid. Expect '{1}'</value>
  </data>
  <data name="TypeShouldBeAssemblyQualified" xml:space="preserve">
    <value>Type '{0}' name should be assembly qualified. For example 'ClassName, AssemblyName'</value>
  </data>
  <data name="AnonymousTypesDiscouraged" xml:space="preserve">
    <value>For better generated code quality, define schemas instead of using anonymous types.</value>
  </data>
  <data name="BodyMustHaveSchema" xml:space="preserve">
    <value>Each body parameter must have a schema</value>
  </data>
  <data name="BodyWithType" xml:space="preserve">
    <value>A body parameter cannot have a type, format, or any other properties describing its type.</value>
  </data>
  <data name="ConflictingRef" xml:space="preserve">
    <value>Properties defined alongside $ref will be ignored according to JSON specification.</value>
  </data>
  <data name="EmptyClientName" xml:space="preserve">
    <value>Empty x-ms-client-name property.</value>
  </data>
  <data name="HeaderShouldHaveClientName" xml:space="preserve">
    <value>Each header parameter should have an explicit client name defined for improved code generation output quality.</value>
  </data>
  <data name="InvalidDefault" xml:space="preserve">
    <value>The default value is not one of the values enumerated as valid for this element.</value>
  </data>
  <data name="InvalidSchemaParameter" xml:space="preserve">
    <value>Only body parameters can have a schema defined.</value>
  </data>
  <data name="UnknownFormat" xml:space="preserve">
    <value>'{0}' is not a known format.</value>
  </data>
  <data name="MissingDescription" xml:space="preserve">
    <value>Consider adding a 'description' element, essential for maintaining reference documentation.</value>
  </data>
  <data name="MissingRequiredProperty" xml:space="preserve">
    <value>'{0}' is supposedly required, but no such property exists.</value>
  </data>
  <data name="NoDefinitionForPathParameter" xml:space="preserve">
    <value>Could not find a definition for the path parameter '{0}'</value>
  </data>
  <data name="NoResponses" xml:space="preserve">
    <value>No responses defined.</value>
  </data>
  <data name="OnlyOneUnderscoreAllowedInOperationId" xml:space="preserve">
    <value>Only 1 underscore is permitted in the operation id, following Noun_Verb conventions.</value>
  </data>
  <data name="OperationIdMissing" xml:space="preserve">
    <value>OperationId is required for all operations. Please add it for '{0}' operation of '{1}' path.</value>
  </data>
  <data name="TooManyBodyParameters" xml:space="preserve">
    <value>Operations can not have more than one 'body' parameter. The following were found: '{0}'</value>
  </data>
  <data name="CodeGenerationError" xml:space="preserve">
    <value>Errors found during Swagger document validation.</value>
  </data>
  <data name="XMSPathBaseNotInPaths" xml:space="preserve">
    <value>Paths in x-ms-paths must overload a normal path in the paths section.</value>
  </data>
  <data name="DescriptionNotDescriptive" xml:space="preserve">
    <value>The value provided for description is not descriptive enough.</value>
  </data>
  <data name="OperationIdNounInVerb" xml:space="preserve">
    <value>Per the Noun_Verb convention for Operation Ids, the noun '{0}' should not appear after the underscore.</value>
  </data>
</root>